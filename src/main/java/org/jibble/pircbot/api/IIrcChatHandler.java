package org.jibble.pircbot.api;

import org.jibble.pircbot.DccChat;
import org.jibble.pircbot.DccFileTransfer;
import org.jibble.pircbot.beans.User;

/**
 * Interface to handle chat events
 * 
 * @since 1.8.0
 * 
 * @author wwsean08
 *
 */
public interface IIrcChatHandler
{
    /**
     * This method is called whenever an ACTION is sent from a user. E.g. such
     * events generated by typing "/me goes shopping" in most IRC clients.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @param sender
     *            The nick of the user that sent the action.
     * @param login
     *            The login of the user that sent the action.
     * @param hostname
     *            The hostname of the user that sent the action.
     * @param target
     *            The target of the action, be it a channel or our nick.
     * @param action
     *            The action carried out by the user.
     */
    void onAction(String sender, String login, String hostname, String target, String action);
    
    /**
     * This method used to be called when a DCC CHAT request was sent to the
     * PircBot. Please use the onIncomingChatRequest method to accept chats, as
     * it has better functionality.
     *
     * @deprecated As of PircBot 1.2.0, use
     *             {@link #onIncomingChatRequest(DccChat)}
     */
    public void onDccChatRequest(String sourceNick, String sourceLogin, String sourceHostname, long address, int port);
    
    /**
     * This method used to be called when a DCC SEND request was sent to the
     * PircBot. Please use the onIncomingFileTransfer method to receive files,
     * as it has better functionality and supports resuming.
     *
     * @deprecated As of PircBot 1.2.0, use
     *             {@link #onIncomingFileTransfer(DccFileTransfer)}
     */
    public void onDccSendRequest(String sourceNick, String sourceLogin, String sourceHostname, String filename,
            long address, int port, int size);
    
    /**
     * This method gets called when a DccFileTransfer has finished. If there was
     * a problem, the Exception will say what went wrong. If the file was sent
     * successfully, the Exception will be null.
     * <p>
     * Both incoming and outgoing file transfers are passed to this method. You
     * can determine the type by calling the isIncoming or isOutgoing methods on
     * the DccFileTransfer object.
     *
     * @since PircBot 1.2.0
     *
     * @param transfer
     *            The DccFileTransfer that has finished.
     * @param e
     *            null if the file was transfered successfully, otherwise this
     *            will report what went wrong.
     *
     * @see DccFileTransfer
     *
     */
    public void onFileTransferFinished(DccFileTransfer transfer, Exception e);
    
    /**
     * This method will be called whenever a DCC Chat request is received. This
     * means that a client has requested to chat to us directly rather than via
     * the IRC server. This is useful for sending many lines of text to and from
     * the bot without having to worry about flooding the server or any
     * operators of the server being able to "spy" on what is being said. This
     * abstract implementation performs no action, which means that all DCC CHAT
     * requests will be ignored by default.
     * <p>
     * If you wish to accept the connection, then you may override this method
     * and call the accept() method on the DccChat object, which connects to the
     * sender of the chat request and allows lines to be sent to and from the
     * bot.
     * <p>
     * Your bot must be able to connect directly to the user that sent the
     * request.
     * <p>
     * Example:
     * 
     * <pre>
     * public void onIncomingChatRequest(DccChat chat) {
     *     try {
     *         // Accept all chat, whoever it's from.
     *         chat.accept();
     *         chat.sendLine("Hello");
     *         String response = chat.readLine();
     *         chat.close();
     *     }
     *     catch (IOException e);
     * }
     * </pre>
     *
     * Each time this method is called, it is called from within a new Thread so
     * that multiple DCC CHAT sessions can run concurrently.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @since PircBot 1.2.0
     *
     * @param chat
     *            A DccChat object that represents the incoming chat request.
     *
     * @see DccChat
     *
     */
    public void onIncomingChatRequest(DccChat chat);
    
    /**
     * This method is called whenever a DCC SEND request is sent to the PircBot.
     * This means that a client has requested to send a file to us. This
     * abstract implementation performs no action, which means that all DCC SEND
     * requests will be ignored by default. If you wish to receive the file,
     * then you may override this method and call the receive method on the
     * DccFileTransfer object, which connects to the sender and downloads the
     * file.
     * <p>
     * Example:
     * 
     * <pre>
     * public void onIncomingFileTransfer(DccFileTransfer transfer)
     * {
     *     // Use the suggested file name.
     *     File file = transfer.getFile();
     *     // Receive the transfer and save it to the file, allowing resuming.
     *     transfer.receive(file, true);
     * }
     * </pre>
     * <p>
     * <b>Warning:</b> Receiving an incoming file transfer will cause a file to
     * be written to disk. Please ensure that you make adequate security checks
     * so that this file does not overwrite anything important!
     * <p>
     * Each time a file is received, it happens within a new Thread in order to
     * allow multiple files to be downloaded by the PircBot at the same time.
     * <p>
     * If you allow resuming and the file already partly exists, it will be
     * appended to instead of overwritten. If resuming is not enabled, the file
     * will be overwritten if it already exists.
     * <p>
     * You can throttle the speed of the transfer by calling the setPacketDelay
     * method on the DccFileTransfer object, either before you receive the file
     * or at any moment during the transfer.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @since PircBot 1.2.0
     *
     * @param transfer
     *            The DcccFileTransfer that you may accept.
     *
     * @see DccFileTransfer
     *
     */
    public void onIncomingFileTransfer(DccFileTransfer transfer);
    
    /**
     * This method is called whenever a message is sent to a channel.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @param channel
     *            The channel to which the message was sent.
     * @param sender
     *            The nick of the person who sent the message.
     * @param login
     *            The login of the person who sent the message.
     * @param hostname
     *            The hostname of the person who sent the message.
     * @param message
     *            The actual message sent to the channel.
     */
    void onMessage(String channel, String sender, String login, String hostname, String message);
    
    /**
     * This method is called whenever we receive a notice.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @param sourceNick
     *            The nick of the user that sent the notice.
     * @param sourceLogin
     *            The login of the user that sent the notice.
     * @param sourceHostname
     *            The hostname of the user that sent the notice.
     * @param target
     *            The target of the notice, be it our nick or a channel name.
     * @param notice
     *            The notice message.
     */
    void onNotice(String sourceNick, String sourceLogin, String sourceHostname, String target, String notice);
    
    /**
     * This method is called whenever a private message is sent to the PircBot.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @param sender
     *            The nick of the person who sent the private message.
     * @param login
     *            The login of the person who sent the private message.
     * @param hostname
     *            The hostname of the person who sent the private message.
     * @param message
     *            The actual message.
     */
    void onPrivateMessage(String sender, String login, String hostname, String message);
    
    /**
     * This method is called whenever we receive a line from the server that the
     * PircBot has not been programmed to recognize.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @param line
     *            The raw line that was received from the server.
     */
    void onUnknown(String line);
    
    /**
     * This method is called when we receive a user list from the server after
     * joining a channel.
     * <p>
     * Shortly after joining a channel, the IRC server sends a list of all users
     * in that channel. The PircBot collects this information and calls this
     * method as soon as it has the full list.
     * <p>
     * To obtain the nick of each user in the channel, call the getNick() method
     * on each User object in the array.
     * <p>
     * At a later time, you may call the getUsers method to obtain an up to date
     * list of the users in the channel.
     * <p>
     * The implementation of this method in the PircBot abstract class performs
     * no actions and may be overridden as required.
     *
     * @since PircBot 1.0.0
     *
     * @param channel
     *            The name of the channel.
     * @param users
     *            An array of User objects belonging to this channel.
     *
     * @see User
     */
    void onUserList(String channel, User[] users);
}
